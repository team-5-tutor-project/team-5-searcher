@page "/Favorites/{Token}"
@using Microsoft.AspNetCore.Components
@using TutorProject.Searcher.Front.Models
@inject NavigationManager _navigationManager
@inject HttpClient _http

<PageTitle>Favorites</PageTitle>

<h1>Избранное</h1>

@if (_tutorsToShowList == null || _tutorsToShowList.Count == 0)
{
     <p><em>У вас пока нет репетиторов в Избранном</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Имя</th>
            <th>Формат работы</th>
            <th>Описание</th>
            <th>Цена за час</th>
            <th>Классы обучения</th>
            <th>Предметы</th>
            <th></th>
            <th></th>

        </tr>
        </thead>
        <tbody>
        @{
            System.Diagnostics.Debug.Assert(_tutorsToShowList != null, nameof(_tutorsToShowList) + " != null");
        }
        @foreach (var tut in _tutorsToShowList)
        {
            <tr>
                <td>@tut.Tutor.Name</td>
                <td>@tut.Tutor.WorkFormat</td>
                <td>@tut.Tutor.Description</td>
                <td>@tut.Tutor.PricePerHour</td>
                <td>@tut.Tutor.PupilMinClass - @tut.Tutor.PupilMaxClass</td>
                <td>@tut.Subjects</td>
                <td><button class="btn btn-primary" @onclick="@(() => DeleteFromFavorites(tut.Tutor.Id))">удалить</button></td>
                <td><button class="btn btn-primary" @onclick="@(() => GoToChat())">чат</button></td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string Token { get; set; }
    
    private AuthorizedUser? _client;
    private List<TutorResult>? _tutorsList;
    private List<TutorToShow>? _tutorsToShowList;
    private string Start { get; set; } = "http://localhost:6001/";

    
    protected override async Task OnInitializedAsync()
    {
        var responseMessage = await _http.GetAsync($"http://localhost:4000/api/authorization?token={Token}");
        _client = responseMessage.Content.ReadFromJsonAsync<AuthorizedUser>().Result;
        if (_client == null || _client.UserId == null)
        {
            _navigationManager.NavigateTo("/login");
        }
        _tutorsList = new List<TutorResult>();
        _tutorsToShowList = new List<TutorToShow>();
        
        var response = await _http.GetAsync(Start + $"favorites/{_client.UserId}/getTutorsFromFavorites");
        _tutorsList = response.Content.ReadFromJsonAsync<List<TutorResult>>().Result;

        if (_tutorsList != null)
        {
            foreach (var tutor in _tutorsList)
            {
                tutor.Description ??= "-";
                var resp = await _http.GetAsync(Start + $"searcher/{tutor.Id}/getAllSubjects");
                var subjects = resp.Content.ReadFromJsonAsync<List<string>>().Result;
                _tutorsToShowList.Add(new TutorToShow(tutor, subjects));
            }
        }
    }

    private async Task DeleteFromFavorites(Guid tutorId)
    {
        await _http.DeleteAsync(Start + $"favorites/{_client.UserId}/deleteTutorFromFavorites?tutorId={tutorId}");
    }

    private async Task GoToChat()
    {
        
    }
}