@page "/Search/{token}"
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json;
@using TutorProject.Searcher.Front.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Search</PageTitle>

<h1>Поиск</h1>

<div class="col-12">
    <h3><b>Задайте параметры</b></h3>
    <hr />
    
    <EditForm Model="@TutorToSearch" OnValidSubmit="@SearchTutor">
        
        <div>
            <label class="col-2 font-weight-bold">дни занятий: </label>
            <label>
                понедельник:
                <InputCheckbox @bind-Value="@TutorToSearch.Monday" />
            </label>
            <label>
                вторник:
                <InputCheckbox @bind-Value="@TutorToSearch.Tuesday" />
            </label>
            <label>
                среда:
                <InputCheckbox @bind-Value="@TutorToSearch.Wednesday" />
            </label>
            <label>
                четверг:
                <InputCheckbox @bind-Value="@TutorToSearch.Thursday" />
            </label>
            <label>
                пятница:
                <InputCheckbox @bind-Value="@TutorToSearch.Friday" />
            </label>
            <label>
                суббота:
                <InputCheckbox @bind-Value="@TutorToSearch.Saturday" />
            </label>
            <label>
                воскресенье:
                <InputCheckbox @bind-Value="@TutorToSearch.Sunday" />
            </label>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">предмет: </label>
            <InputText @bind-Value="TutorToSearch.Subject" class="form-control col-3" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">минимальная цена: </label>
            <InputNumber class="form-control col-3" @bind-Value="TutorToSearch.MinPrice" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">максимальная цена: </label>
            <InputNumber class="form-control col-3" @bind-Value="TutorToSearch.MaxPrice" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">класс обучения: </label>
            <InputNumber class="form-control col-3" @bind-Value="TutorToSearch.PupilClass" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">формат работы: </label>
            <InputSelect @bind-Value="TutorToSearch.WorkFormat" class="form-check.control col-3">
                @foreach (var format in Formats)
                {
                    <option value="@format">@format</option>
                }
            </InputSelect>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">сортировка: </label>
            <InputSelect @bind-Value="TutorToSearch.TutorsOrder" class="form-check.control col-3">
                @foreach (var order in Orders)
                {
                    <option value="@order">@order</option>
                }
            </InputSelect>
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn-primary" @onclick="@(()=> SearchTutor())" value="Поиск" />
            <span>&nbsp;</span>
        </div>
        
    </EditForm>
</div>
<br />

<table class="table">
        <thead>
        <tr>
            <th>Имя</th>
            <th>Описание</th>
            <th>Формат работы</th>
            <th>Цена за час</th>
            <th>Классы обучения</th>
            <th>Предметы</th>
            <th>Расписание</th>
            <th>ЧС</th>
            <th>Избранное</th>
            <th>Начать чат</th>
        </tr>
        </thead>
        <tbody>
        @{
            System.Diagnostics.Debug.Assert(TutorsList != null, nameof(TutorsList) + " != null");
        }
        @foreach (var tut in TutorsToShowList)
        {
            <tr>
                <td>@tut.Tutor.Name</td>
                <td>@tut.Tutor.Description</td>
                <td>@tut.Tutor.WorkFormat</td>
                <td>@tut.Tutor.PricePerHour</td>
                <td>@tut.Tutor.PupilMinClass - @tut.Tutor.PupilMaxClass</td>
                <td>@tut.Subjects</td>
                <td><button class="btn btn-primary" @onclick="@(()=> NavToSchedule(@tut.Tutor.Id.ToString()))">расписание</button></td>
                <td><button class="btn btn-primary" @onclick="@(()=> AddToBlackList(@tut.Tutor.Id.ToString()))">чс</button></td>
                <td><button class="btn btn-primary" @onclick="@(()=> AddToFavourites(@tut.Tutor.Id.ToString()))">изб</button></td>
                <td><button class="btn btn-primary" @onclick="@(()=> StartChat(@tut.Tutor.Id.ToString()))">чат</button></td>
            </tr>
        }
        </tbody>
</table>

@code {
    [Parameter]
    public string Token { get; set; }
    private AuthorizedUser User { get; set; }
    private string ClientID { get; set; }
    private TutorToSearch? TutorToSearch { get; set; }
    public List<TutorResult>? TutorsList { get; set; }
    private List<TutorToShow>? TutorsToShowList { get; set; }
    private string[]? Orders { get; set; }
    private string[]? Formats { get; set; }
    private string SearchStart { get; set; } = "http://localhost:6001/searcher/";
    private string ListsStart { get; set; } = "http://localhost:6001/";

    protected override async Task OnInitializedAsync()
    {
        TutorToSearch = new TutorToSearch();
        Orders = new[] {"RisingPrice", "DownwardPrice", ""};
        Formats = new[] {"Online", "ClientHome", "TutorHome", ""};
        TutorsList = new List<TutorResult>();
        TutorsToShowList = new List<TutorToShow>();

        var authoResponse = await Http.GetAsync($"http://localhost:4000/api/authorization?token={Token}");
        User = authoResponse.Content.ReadFromJsonAsync<AuthorizedUser>().Result;
        if (User.UserId == null)
        {
            NavigationManager.NavigateTo("http://localhost:5000/login");
        }
        ClientID = User.UserId.ToString();
        
        var tutorsResponse = await Http.GetAsync(SearchStart + $"{ClientID}/getAllTutors");
        TutorsList = tutorsResponse.Content.ReadFromJsonAsync<List<TutorResult>>().Result;
        foreach (var tutor in TutorsList)
        {
            var subjResponse = await Http.GetAsync(SearchStart + $"{tutor.Id}/getAllSubjects");
            var subjects = subjResponse.Content.ReadFromJsonAsync<List<string>>().Result;
            TutorsToShowList.Add(new TutorToShow(tutor, subjects));
        }
    }
    
    private async Task SearchTutor()
    {
        string request = SearchStart + $"{ClientID}/search?";
        bool isFirst = true;
        if (TutorToSearch.Subject != "")
        {
            request += $"Subject={TutorToSearch.Subject}";
            isFirst = false;
        }
        if (TutorToSearch.WorkFormat != "")
        {
            if (!isFirst) request += "&";
            request += $"WorkFormat={Array.IndexOf(Formats, TutorToSearch.WorkFormat)}";
            isFirst = false;
        }
        if (TutorToSearch.MinPrice != 0)
        {
            if (!isFirst) request += "&";
            request += $"MinPrice={TutorToSearch.MinPrice}";
            isFirst = false;
        }
        if (TutorToSearch.MaxPrice != 0)
        {
            if (!isFirst) request += "&";
            request += $"MaxPrice={TutorToSearch.MaxPrice}";
            isFirst = false;
        }
        if (TutorToSearch.PupilClass != 0)
        {
            if (!isFirst) request += "&";
            request += $"PupilClass={TutorToSearch.PupilClass}";
            isFirst = false;
        }
        if (TutorToSearch.TutorsOrder != "")
        {
            if (!isFirst) request += "&";
            request += $"TutorsOrder={Array.IndexOf(Orders, TutorToSearch.TutorsOrder)}";
            isFirst = false;
        }
        if (!isFirst) request += "&";
        request += $"Schedule={TutorToSearch.Monday}&Schedule={TutorToSearch.Tuesday}" +
                   $"&Schedule={TutorToSearch.Wednesday}&Schedule={TutorToSearch.Thursday}" +
                   $"&Schedule={TutorToSearch.Friday}&Schedule={TutorToSearch.Saturday}&Schedule={TutorToSearch.Sunday}";
        
        var tutorsResponse = await Http.GetAsync(request);
        TutorsList = tutorsResponse.Content.ReadFromJsonAsync<List<TutorResult>>().Result;
        TutorsToShowList = new List<TutorToShow>();
        var result = new List<TutorToShow>();
        foreach (var tutor in TutorsList)
        {
            var subjResponse = await Http.GetAsync(SearchStart + $"{tutor.Id}/getAllSubjects");
            var subjects = subjResponse.Content.ReadFromJsonAsync<List<string>>().Result;
            result.Add(new TutorToShow(tutor, subjects));
        }
        TutorsToShowList = result;
    }
    
    private void NavToSchedule(string tutorId)
    {
        NavigationManager.NavigateTo($"/search/schedule/{tutorId}/{Token}");
    }
    
    private async Task AddToBlackList(string tutorId)
    {
        var uri = ListsStart + $"blacklist/{ClientID}/addTutorToBlacklist?tutorId={tutorId}";
        var clientToTutor = new ClientToTutor { Id = new Guid(), Client  = new Guid(ClientID), Tutor = new Guid(tutorId)};
        string json = JsonConvert.SerializeObject(clientToTutor);
        HttpContent content = new StringContent(json);
        await Http.PostAsync(uri, content);
    }
    
    private async Task AddToFavourites(string tutorId)
    {
        var uri = ListsStart + $"favorites/{ClientID}/addTutorToFavorites?tutorId={tutorId}";
        var clientToTutor = new ClientToTutor { Id = new Guid(), Client  = new Guid(ClientID), Tutor = new Guid(tutorId)};
        string json = JsonConvert.SerializeObject(clientToTutor);
        HttpContent content = new StringContent(json);
        await Http.PostAsync(uri, content);
    }

    private void StartChat(string tutorId)
    {
        
    }
}