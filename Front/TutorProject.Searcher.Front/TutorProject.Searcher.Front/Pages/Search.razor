@page "/Search"
@using Microsoft.AspNetCore.Components
@using TutorProject.Searcher.Front.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Search</PageTitle>

<h1>Search</h1>

<div class="col-12">
    <h3><b>Задайте параметры</b></h3>
    <hr />
    
    <EditForm Model="@TutorToSearch" OnValidSubmit="@SearchTutor">
        
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">предмет: </label>
            <InputText @bind-Value="TutorToSearch.Subject" class="form-control col-3" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">минимальная цена: </label>
            <InputNumber class="form-control col-3" @bind-Value="TutorToSearch.MinPrice" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">максимальная цена: </label>
            <InputNumber class="form-control col-3" @bind-Value="TutorToSearch.MaxPrice" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">класс обучения: </label>
            <InputNumber class="form-control col-3" @bind-Value="TutorToSearch.PupilClass" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">формат работы: </label>
            <InputSelect @bind-Value="TutorToSearch.WorkFormat" class="form-check.control col-3">
                @foreach (var format in Formats)
                {
                    <option value="@format">@format</option>
                }
            </InputSelect>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">сортировка: </label>
            <InputSelect @bind-Value="TutorToSearch.TutorsOrder" class="form-check.control col-3">
                @foreach (var order in Orders)
                {
                    <option value="@order">@order</option>
                }
            </InputSelect>
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn-primary" value="Search" />
            <span>&nbsp;</span>
            <input type="submit" class="form-control col-1 btn-primary" value="Clear" />
        </div>
        
    </EditForm>
</div>
<br />

<table class="table">
        <thead>
        <tr>
            <th>Имя</th>
            <th>Формат работы</th>
            <th>Цена за час</th>
            <th>Мин класс обучения</th>
            <th>Макс класс обучения</th>
        </tr>
        </thead>
        <tbody>
        @{
            System.Diagnostics.Debug.Assert(TutorsList != null, nameof(TutorsList) + " != null");
        }
        @foreach (var tut in TutorsList)
        {
            <tr>
                <td>@tut.Name</td>
                <td>@tut.WorkFormat</td>
                <td>@tut.PricePerHour</td>
                <td>@tut.PupilMinClass</td>
                <td>@tut.PupilMaxClass</td>
            </tr>
        }
        </tbody>
</table>

@code {
    public string ClientID { get; set; }
    private TutorToSearch? TutorToSearch { get; set; }
    public List<TutorResult>? TutorsList { get; set; }
    private string[]? Orders { get; set; }
    private string[]? Formats { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        TutorToSearch = new TutorToSearch();
        Orders = new[] {"RisingPrice", "DownwardPrice", ""};
        Formats = new[] {"Online", "ClientHome", "TutorHome", ""};
        TutorsList = new List<TutorResult>();
        ClientID = "12cbe563-a53d-477e-b8ba-9a1741d80567";
        
        var response = await Http.GetAsync($"https://localhost:7263/searcher/{ClientID}/getAllTutors");
        TutorsList = response.Content.ReadFromJsonAsync<List<TutorResult>>().Result;
    }
    
    private async Task SearchTutor()
    {
        string request = $"https://localhost:7263/searcher/{ClientID}/getAllTutors";
        if (TutorToSearch.Subject != "" || TutorToSearch.WorkFormat != "" 
            || TutorToSearch.MinPrice != 0 || TutorToSearch.MaxPrice != 0 
            || TutorToSearch.PupilClass != 0 || TutorToSearch.TutorsOrder != "")
        {
            bool isntFirst = false;
            request = $"https://localhost:7263/searcher/{ClientID}/search?";
            if (TutorToSearch.Subject != "")
            {
                request += $"Subject={TutorToSearch.Subject}";
                isntFirst = true;
            }
            if (TutorToSearch.WorkFormat != "")
            {
                if (isntFirst) request += "&";
                request += $"WorkFormat={Array.IndexOf(Formats, TutorToSearch.WorkFormat)}";
                isntFirst = true;
            }
            if (TutorToSearch.MinPrice != 0)
            {
                if (isntFirst) request += "&";
                request += $"MinPrice={TutorToSearch.MinPrice}";
                isntFirst = true;
            }
            if (TutorToSearch.MaxPrice != 0)
            {
                if (isntFirst) request += "&";
                request += $"MaxPrice={TutorToSearch.MaxPrice}";
                isntFirst = true;
            }
            if (TutorToSearch.PupilClass != 0)
            {
                if (isntFirst) request += "&";
                request += $"PupilClass={TutorToSearch.PupilClass}";
                isntFirst = true;
            }
            if (TutorToSearch.TutorsOrder != "")
            {
                if (isntFirst) request += "&";
                request += $"TutorsOrder={Array.IndexOf(Orders, TutorToSearch.TutorsOrder)}";
            }
        }
        var response = await Http.GetAsync(request);
        TutorsList = response.Content.ReadFromJsonAsync<List<TutorResult>>().Result;
    }
}