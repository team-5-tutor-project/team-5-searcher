@page "/Search/{token}"
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json;
@using TutorProject.Searcher.Front.Models
@using System.Net
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Search</PageTitle>
<button class="btn btn-warning" style="float: right" @onclick="() => NavigateToHome()">
    Домой
</button>
<br>
<br>

<h1>Поиск</h1>

@if (!IsParam)
{
    <div align="right">
        <label> <h4> Добавить параметры поиска </h4></label>
        <button @onclick="ShowParameters">+</button>
    </div>
}
else
{
        <div align="right">
        <label> <h4> Скрыть параметры поиска </h4></label>
        <button @onclick="HideParameters">-</button>
    </div>
    
    <div class="col-12">
    <h5><b>Задайте параметры</b></h5>
    <hr />
    
    <EditForm Model="@TutorToSearch" OnValidSubmit="@SearchTutor">
        
        <div>
            <label>Предмет: </label>
            <InputText @bind-Value="TutorToSearch.Subject" />
            <button @onclick="@(()=> Clean("subject"))">очистить</button>
        </div>
        <br />
        <div >
            <label>Минимальная цена: </label>
            <InputNumber @bind-Value="TutorToSearch.MinPrice" />
            <button @onclick="@(()=> Clean("minprace"))">очистить</button>
        </div>
        <br />
        <div>
            <label >Максимальная цена: </label>
            <InputNumber @bind-Value="TutorToSearch.MaxPrice" />
            <button @onclick="@(()=> Clean("maxprice"))">очистить</button>
        </div>
        <br />
        <div>
            <label >Класс обучения: </label>
            <InputNumber @bind-Value="TutorToSearch.PupilClass" />
            <button @onclick="@(()=> Clean("pupilclass"))">очистить</button>
        </div>
        <br />
        <div>
            <label>Формат работы: </label>
            <InputSelect @bind-Value="TutorToSearch.WorkFormat">
                @foreach (var format in Formats)
                {
                    <option value="@format">@format</option>
                }
            </InputSelect>
            <button @onclick="@(()=> Clean("workformat"))">очистить</button>
        </div>
        <br />
        <div>
            <label>Сортировка: </label>
            <InputSelect @bind-Value="TutorToSearch.TutorsOrder">
                @foreach (var order in Orders)
                {
                    <option value="@order">@order</option>
                }
            </InputSelect>
            <button @onclick="@(()=> Clean("order"))">очистить</button>
        </div>
        <br />
        <div style="word-spacing: 6px">
            <label>Дни занятий: </label>
            <br />
            <label style="word-spacing: 0px">
                понедельник:
                <InputCheckbox @bind-Value="@TutorToSearch.Monday" />
            </label>
            <label style="word-spacing: 0px">
                вторник:
                <InputCheckbox @bind-Value="@TutorToSearch.Tuesday" />
            </label>
            <label style="word-spacing: 0px">
                среда:
                <InputCheckbox @bind-Value="@TutorToSearch.Wednesday" />
            </label>
            <label style="word-spacing: 0px">
                четверг:
                <InputCheckbox @bind-Value="@TutorToSearch.Thursday" />
            </label>
            <label style="word-spacing: 0px">
                пятница:
                <InputCheckbox @bind-Value="@TutorToSearch.Friday" />
            </label>
            <label style="word-spacing: 0px">
                суббота:
                <InputCheckbox @bind-Value="@TutorToSearch.Saturday" />
            </label>
            <label style="word-spacing: 0px">
                воскресенье:
                <InputCheckbox @bind-Value="@TutorToSearch.Sunday" />
            </label>
        </div>
        <br />
        <div>
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn-primary" @onclick="@(()=> SearchTutor())" value="Применить" />
            <span>&nbsp;</span>
        </div>
        
    </EditForm>
</div>
<br />
}

<h3> Репетиторы: </h3>

<p>@Message</p>

@if (@IsTable){
    <div class = "alert w-auto">
        <table class="table table-sm table-hover">
            <thead class="table-bordered border-top-0">
            <tr>
                <th scope="col" class="text-center">Имя</th>
                <th scope="col" class="text-center">Цена за час</th>
                <th scope="col" class="text-center">Классы обучения</th>
                <th scope="col" class="text-center">Предметы</th>
                <th scope="col" class="text-center">Подробная информация</th>

            </tr>
            </thead>
            <tbody>
            @{
                System.Diagnostics.Debug.Assert(TutorsToShowList != null, nameof(TutorsToShowList) + " != null");
            }
            @foreach (var tut in TutorsToShowList)
            {
                <tr>
                    <td>
                        <div class="text-center">
                            @tut.Tutor.Name
                        </div>
                    </td>
                    <td>
                        <div class="text-center">
                            @if (tut.Tutor.PricePerHour != 0)
                            {
                                <p>@tut.Tutor.PricePerHour</p>
                            }
                            else
                            {
                                <p>Не указана</p>
                            }
                        </div>
                    </td>
                    <td>
                        <div class="text-center">
                            @if (tut.Tutor.PupilMinClass != 0 && tut.Tutor.PupilMaxClass != 0)
                            {
                                @if (tut.Tutor.PupilMinClass != 0 && tut.Tutor.PupilMaxClass == tut.Tutor.PupilMinClass)
                                {
                                    <p>@tut.Tutor.PupilMinClass</p>
                                }
                                else
                                {
                                    <p>@tut.Tutor.PupilMinClass - @tut.Tutor.PupilMaxClass</p>
                                }
                            }
                            else
                            {
                                if (tut.Tutor.PupilMinClass == 0 && tut.Tutor.PupilMaxClass != 0)
                                {
                                    <p>Не старше @tut.Tutor.PupilMaxClass</p>
                                }
                                else
                                {
                                    if (tut.Tutor.PupilMinClass != 0 && tut.Tutor.PupilMaxClass == 0)
                                    {
                                        <p>Не младше @tut.Tutor.PupilMinClass</p>
                                    }
                                    else
                                    {
                                        <p>Не указаны</p>
                                    }
                                }
                            }
                        </div>
                    </td>
                    <td><div class="text-center">
                            @tut.Subjects
                        </div>
                    </td>
                    <td><div class="text-center"><a href="/Additional-information/@tut.Tutor.Id/@Token">Посмотреть</a></div></td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    public string Token { get; set; }
    private AuthorizedUser User { get; set; }
    private string ClientID { get; set; }
    private TutorToSearch? TutorToSearch { get; set; }
    public List<TutorResult>? TutorsList { get; set; }
    private List<TutorToShow>? TutorsToShowList { get; set; }
    private string[]? Orders { get; set; }
    private string[]? Formats { get; set; }
    private string SearchStart { get; set; } = "http://localhost:6001/searcher/";
    private bool IsParam { get; set; }
    private bool IsTable { get; set; }
    private string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TutorToSearch = new TutorToSearch();
        Orders = new[] {"По возрастанию цены", "По убыванию цены", ""};
        Formats = new[] {"Онлайн", "Дома у вас", "Дома у репетитора", ""};
        TutorsList = new List<TutorResult>();
        TutorsToShowList = new List<TutorToShow>();
        IsParam = false;
        IsTable = true;
        Message = "Загрузка...";

        var authoResponse = await Http.GetAsync($"http://localhost:4000/api/authorization?token={Token}");
        if (authoResponse.StatusCode == HttpStatusCode.BadRequest)
        {
            NavigationManager.NavigateTo("http://localhost:5000/login");
        }        
        User = authoResponse.Content.ReadFromJsonAsync<AuthorizedUser>().Result;

        if (User.UserId == null)
        {
            NavigationManager.NavigateTo("http://localhost:5000/login");
        }        

        ClientID = User.UserId.ToString();
        
        var tutorsResponse = await Http.GetAsync(SearchStart + $"{ClientID}/getAllTutors");
        if (tutorsResponse.StatusCode == HttpStatusCode.NotFound)
        {
            TutorsToShowList = new List<TutorToShow>();
            Message = "По вашему запросу ничего не найдено :(";
            IsTable = false;
        }
        else
        {
            IsTable = true;
            TutorsList = tutorsResponse.Content.ReadFromJsonAsync<List<TutorResult>>().Result;
            foreach (var tutor in TutorsList)
            {
                var subjResponse = await Http.GetAsync(SearchStart + $"{tutor.Id}/getAllSubjects");
                var subjects = subjResponse.Content.ReadFromJsonAsync<List<string>>().Result;
                TutorsToShowList.Add(new TutorToShow(tutor, subjects));
            }
            Message = "";
        }
    }
    
    private async Task SearchTutor()
    {
        Message = "Загрузка...";
        string request = SearchStart + $"{ClientID}/search?";
        bool isFirst = true;
        if (TutorToSearch.Subject != "")
        {
            request += $"Subject={TutorToSearch.Subject}";
            isFirst = false;
        }
        if (TutorToSearch.WorkFormat != "")
        {
            if (!isFirst) request += "&";
            request += $"WorkFormat={Array.IndexOf(Formats, TutorToSearch.WorkFormat)}";
            isFirst = false;
        }
        if (TutorToSearch.MinPrice != 0)
        {
            if (!isFirst) request += "&";
            request += $"MinPrice={TutorToSearch.MinPrice}";
            isFirst = false;
        }
        if (TutorToSearch.MaxPrice != 0)
        {
            if (!isFirst) request += "&";
            request += $"MaxPrice={TutorToSearch.MaxPrice}";
            isFirst = false;
        }
        if (TutorToSearch.PupilClass != 0)
        {
            if (!isFirst) request += "&";
            request += $"PupilClass={TutorToSearch.PupilClass}";
            isFirst = false;
        }
        if (TutorToSearch.TutorsOrder != "")
        {
            if (!isFirst) request += "&";
            request += $"TutorsOrder={Array.IndexOf(Orders, TutorToSearch.TutorsOrder)}";
            isFirst = false;
        }
        if (!isFirst) request += "&";
        request += $"Schedule={TutorToSearch.Monday}&Schedule={TutorToSearch.Tuesday}" +
                   $"&Schedule={TutorToSearch.Wednesday}&Schedule={TutorToSearch.Thursday}" +
                   $"&Schedule={TutorToSearch.Friday}&Schedule={TutorToSearch.Saturday}&Schedule={TutorToSearch.Sunday}";
        
        var tutorsResponse = await Http.GetAsync(request);
        if (tutorsResponse.StatusCode == HttpStatusCode.NotFound)
        {
            TutorsToShowList = new List<TutorToShow>();
            Message = "По вашему запросу ничего не найдено :(";
            IsTable = false;
        }
        else
        {
            IsTable = true;
            TutorsList = tutorsResponse.Content.ReadFromJsonAsync<List<TutorResult>>().Result;
            TutorsToShowList = new List<TutorToShow>();
            var result = new List<TutorToShow>();
            foreach (var tutor in TutorsList)
            {
                var subjResponse = await Http.GetAsync(SearchStart + $"{tutor.Id}/getAllSubjects");
                var subjects = subjResponse.Content.ReadFromJsonAsync<List<string>>().Result;
                result.Add(new TutorToShow(tutor, subjects));
            }
            TutorsToShowList = result;
            Message = "";
        }
    }
    
    private void ShowParameters()
    {
        IsParam = true;
    }
    
    private void HideParameters()
    {
        IsParam = false;
    }

    private void Clean(string type)
    {
        if (type == "subject") TutorToSearch.Subject = "";
        if (type == "minprice") TutorToSearch.MinPrice = 0;
        if (type == "maxprice") TutorToSearch.MaxPrice = 0;
        if (type == "pupilclass") TutorToSearch.PupilClass = 0;
        if (type == "workformat") TutorToSearch.WorkFormat = "";
        if (type == "order") TutorToSearch.TutorsOrder = "";
    }
    
    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("http://localhost:5000/login");
    }
}