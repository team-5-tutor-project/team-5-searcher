@page "/search/schedule-editor/{token}"
@using TutorProject.Searcher.Front.Models
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http


<PageTitle>SchedulEditor</PageTitle>

<h2>Расписание</h2>
<p></p>
<p></p>
<button class="btn btn-success btn-sm" @onclick="() => SetAllTimeFree()">
    Освободить все расписание
</button>
<button class="btn btn-danger btn-sm" @onclick="() => SetAllTimeTaken()">
    Закрыть все расписание
</button>
<p></p>

<table class="table">
    <thead>
    <tr>
        <th class="text-center">Понедельник</th>
        <th class="text-center">Вторник</th>
        <th class="text-center">Среда</th>
        <th class="text-center">Четверг</th>
        <th class="text-center">Пятница</th>
        <th class="text-center">Суббота</th>
        <th class="text-center">Воскресенье</th>
    </tr>
    </thead>
    <tbody>



    @if (TutorSchedule != null)
    {
        @foreach (var lesson in LessonTime)
        {
            var j = LessonTime.IndexOf(lesson);
            <tr>
                @foreach (var day in TutorSchedule.FreeTimeSchedule)
                        {
                            var i = TutorSchedule.FreeTimeSchedule.IndexOf(day);
                            @switch (TutorSchedule?.FreeTimeSchedule[i].DaySchedule[j].ToString())
                            {
                                case "True":
                                    <td>
                                        <blockquote class="blockquote text-center">
                                            <button class="btn btn-success btn-sm" @onclick="() => SetTimeTaken(i, j)">
                                                @lesson
                                            </button>
                                        </blockquote>
                                    </td>
                                    break;
                                case "False":
                                    <td>
                                        <blockquote class="blockquote text-center" @onclick="() => SetTimeFree(i, j)">
                                            <button class="btn btn-secondary btn-sm">
                                                @lesson
                                            </button>
                                        </blockquote>
                                    </td>
                                    break;
                            }
                        }
            </tr>
        }
        
    }
    
    </tbody>
</table>

@code {
    [Parameter]
    public string Token { get; set; }
    
    private AuthorizedUser User { get; set; }
    private string UserId { get; set; }
    
    private ScheduleResult? TutorSchedule { get; set; }
    private List<string> LessonTime { get; set; } = new List<string>();
    private string ScheduleStart { get; set; } = "http://localhost:6001/schedule/";

    protected override async Task OnInitializedAsync()
    {
        var authoResponse = await Http.GetAsync($"http://localhost:4000/api/authorization?token={Token}");
        User = authoResponse.Content.ReadFromJsonAsync<AuthorizedUser>().Result;
        if (User.UserId == null)
        {
            NavigationManager.NavigateTo("https://localhost:7020/login");
        }
        UserId = User.UserId.ToString();
        
        var response = await Http.GetAsync(ScheduleStart + $"{UserId}/getSchedule");
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;

        for (int i = 0; i < 12; i++)
        {
            LessonTime.Add((i + 9).ToString() + ":00");
        }
    }

    
    private async Task SetAllTimeTaken()
    {
        var uri = ScheduleStart + $"{UserId}/setAllTimeTaken";
        var response = await Http.DeleteAsync(uri);
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;
    }
    
    private async Task SetAllTimeFree()
    {
        var uri = ScheduleStart + $"{UserId}/setAllTimeFree";
        var response = await Http.DeleteAsync(uri);
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;
    }
    
    private async Task SetTimeTaken(int day, int lessonTime)
    {
        var uri = ScheduleStart + $"{UserId}/setTimeTaken?DayOfWeek={day}&LessonNumber={lessonTime}";
        var lesson = new Lesson()
        {
            // UserId = TutorSchedule.Tutor.Id,
            DayOfWeek = day,
            LessonTime = lessonTime
        };
        string json = JsonConvert.SerializeObject(lesson);
        HttpContent content = new StringContent(json);
        var response = await Http.PutAsync(uri, content);
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;
    }

    private async Task SetTimeFree(int day, int lessonTime)
    {
        var uri = ScheduleStart + $"{UserId}/addFreeTime?DayOfWeek={day}&LessonNumber={lessonTime}";
        var lesson = new Lesson()
        {
            TutorId = new Guid(UserId),
            DayOfWeek = day,
            LessonTime = lessonTime
        };
        string json = JsonConvert.SerializeObject(lesson);
        HttpContent content = new StringContent(json);
        var response = await Http.PutAsync(uri, content);
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;
    }
    
}