@page "/Additional-information/{tutorId}/{token}"
@using TutorProject.Searcher.Front.Models
@using Newtonsoft.Json
@using System.Net
@using System.Text
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Additional Information</PageTitle>
<button class="btn btn-warning" style="float: right" @onclick="() => NavigateToHome()">
    Домой
</button>
<br>
<br>
@if (TutorSchedule != null)
{
    <div>
        @if (TutorSchedule?.Tutor.PricePerHour == 0)
        {
            <h2><strong>@TutorSchedule?.Tutor.Name</strong></h2>
        }
        else
        {
            <h2 style="word-spacing: 6px"><strong>@TutorSchedule?.Tutor.Name</strong> @TutorSchedule?.Tutor.PricePerHour₽ </h2>

        }
        @if (TutorSubjects != null)
        {
            <div>
                @foreach (var sub in TutorSubjects)
                {
                    <h4>@sub </h4>
                }
            </div>
        }
        
        
        @switch (@TutorFormat)
        {
            case "TutorHome":
                <h5 class="mb-2 text-muted">Дома у репетитора</h5>
                break;
            case "ClientHome":
                <h5 class="mb-2 text-muted">Дома у Вас</h5>
                break;
            case "Online":
                <h5 class="mb-2 text-muted">Онлайн</h5>
                break;
        }
        @if (TutorSchedule?.Tutor.PupilMinClass < TutorSchedule?.Tutor.PupilMaxClass)
        {
            <h5 class="mb-2 text-muted">@TutorSchedule?.Tutor.PupilMinClass - @TutorSchedule?.Tutor.PupilMaxClass классы</h5>
        }
        @if (TutorSchedule?.Tutor.PupilMinClass != 0 && TutorSchedule?.Tutor.PupilMaxClass == TutorSchedule?.Tutor.PupilMinClass)
        {
            <h5 class="mb-2 text-muted">@TutorSchedule?.Tutor.PupilMinClass класс</h5>
        }
    </div>

    
    <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
        @switch(InFav)
        {
            case true:
                <button class="btn btn-danger" @onclick="@(()=> DeleteFromFavorites())"> 
                    <h5 style="height: 14px;">❤️</h5>
                </button>
                break;
            case false:
                <button class="btn btn-outline-danger" @onclick="@(()=> AddToFavorites())"> 
                    <h5 style="height: 14px;">❤️</h5>
                </button>
                break;
        }
        @switch (InBL)
        {
            case true:
                <button class="btn btn-dark" @onclick="@(() => DeleteFromBlacklist())">
                    <h6 style="height: 12px;">ЧС</h6>
                </button>
                break;
            case false:
                <button class="btn btn-outline-dark" @onclick="@(() => AddToBlackList())">
                    <h6 style="height: 12px;">ЧС</h6>
                </button>
                break;
        }
        <button class="btn btn-outline-primary" @onclick="@(() => StartChat())">
            <h6 style="height: 12px;">Начать чат</h6>
        </button>
    </div>
    <br>
    <br>
    @if (TutorSchedule.Tutor.Description != null)
    {
        <div>
            <h5><strong>Описание</strong></h5> 
            <h6>@TutorSchedule?.Tutor.Description</h6>
        </div>
    }
    <br>
<br>
    <h5><strong>Расписание</strong></h5>
    <style>
    tr.tight { line-height: 0.001rem;}
    td.tight { line-height: 0.01rem; }
</style>

    <div class="alert w-50">
        <table class="table table-sm">
            <thead>
            <tr>
                <th class="text-center">
                    ПН
                </th>
                <th class="text-center">
                    ВТ
                </th>
                <th class="text-center">
                    СР
                </th>
                <th class="text-center">
                    ЧТ
                </th>
                <th class="text-center">
                    ПТ
                </th>
                <th class="text-center">
                    СБ
                </th>
                <th class="text-center">
                    ВС
                </th>
            </tr>
            </thead>
            <tbody>
            @foreach (var lesson in LessonTime)
            {
                var j = LessonTime.IndexOf(lesson);
                <tr class="tight">
                    @foreach (var day in TutorSchedule.FreeTimeSchedule)
                    {
                        var i = TutorSchedule.FreeTimeSchedule.IndexOf(day);
                        @switch (TutorSchedule?.FreeTimeSchedule[i].DaySchedule[j].ToString())
                        {
                            case "True":
                                <td class="tight">
                                    <div class="alert alert-success text-center" role="alert">
                                        @lesson
                                    </div>
                                </td>
                                break;
                            case "False":
                                <td class="tight">
                                    <div class="alert alert-secondary text-center" role="alert">
                                        @lesson
                                    </div>
                                </td>
                                break;
                        }
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {

    [Parameter]
    public string TutorId { get; set; }
    
    [Parameter]
    public string Token { get; set; }

    private AuthorizedUser User { get; set; }
    private string ClientId { get; set; }
    private ScheduleResult? TutorSchedule { get; set; }
    private List<string>? TutorSubjects { get; set; }
    private List<string> LessonTime { get; set; } = new List<string>();
    private string Start { get; set; } = "http://localhost:6001/";
    private string ScheduleStart { get; set; } = "http://localhost:6001/schedule/";
    private string SearchStart { get; set; } = "http://localhost:6001/searcher/";
    private string ListsStart { get; set; } = "http://localhost:6001/";
    private string TutorFormat { get; set; }
    private bool InFav { get; set; }
    private bool InBL { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authoResponse = await Http.GetAsync($"https://tutor-project-test.herokuapp.com/api/authorization?token={Token}");
        if (authoResponse.StatusCode == HttpStatusCode.BadRequest)
        {
            NavigationManager.NavigateTo("https://tutor-project-account.herokuapp.com/Login");
        }
        User = authoResponse.Content.ReadFromJsonAsync<AuthorizedUser>().Result;
        if (User.UserId == null)
        {
            NavigationManager.NavigateTo("https://tutor-project-account.herokuapp.com/Login");
        }
        ClientId = User.UserId.ToString();
        
        var response = await Http.GetAsync(ScheduleStart + $"{TutorId}/getSchedule");
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;

        for (int i = 0; i < 12; i++)
        {
            LessonTime.Add((i + 9).ToString() + ":00");
        }
        TutorFormat = TutorSchedule.Tutor.WorkFormat.ToString();
        
        var uri = ListsStart + $"favorites/{ClientId}/checkTutorInFavorites?tutorId={TutorId}";
        var responseMessage = await Http.GetAsync(uri);
        InFav = (responseMessage.Content.ReadFromJsonAsync<bool>().Result);
        
        uri = ListsStart + $"blacklist/{ClientId}/checkTutorInBlacklist?tutorId={TutorId}";
        responseMessage = await Http.GetAsync(uri);
        InBL = (responseMessage.Content.ReadFromJsonAsync<bool>().Result);
        
        var subjResponse = await Http.GetAsync(SearchStart + $"{TutorId}/getAllSubjects");
        var subjects = subjResponse.Content.ReadFromJsonAsync<List<string>>().Result;
        TutorSubjects = subjects;
    }
    
        
    private async Task AddToBlackList()
    {
        InBL = true;
        InFav = false;
        var uri = ListsStart + $"blacklist/{ClientId}/addTutorToBlacklist?tutorId={TutorId}";
        var clientToTutor = new ClientToTutor { Id = new Guid(), Client  = new Guid(ClientId), Tutor = new Guid(TutorId)};
        string json = JsonConvert.SerializeObject(clientToTutor);
        HttpContent content = new StringContent(json);
        await Http.PostAsync(uri, content);
    }
    
    private async Task DeleteFromBlacklist()
    {
        InBL = false;
        await Http.DeleteAsync(ListsStart + $"blacklist/{ClientId}/deleteTutorFromBlacklist?tutorId={TutorId}");
    }

    
    private async Task AddToFavorites()
    {
        InFav = true;
        InBL = false;
        var uri = ListsStart + $"favorites/{ClientId}/addTutorToFavorites?tutorId={TutorId}";
        var clientToTutor = new ClientToTutor { Id = new Guid(), Client  = new Guid(ClientId), Tutor = new Guid(TutorId)};
        string json = JsonConvert.SerializeObject(clientToTutor);
        HttpContent content = new StringContent(json);
        await Http.PostAsync(uri, content);
    }

    private async Task DeleteFromFavorites()
    {
        InFav = false;
        var responseMessage = await Http.DeleteAsync(ListsStart + $"favorites/{ClientId}/deleteTutorFromFavorites?tutorId={TutorId}");
    }

    private async Task StartChat()
    {
        var uri = "http://localhost:8000/v1/chats/default";
        var chat = new Chat {user_name_first = TutorId, user_name_second = ClientId, chat_name = $"{TutorId},{ClientId}"};
        string json = JsonConvert.SerializeObject(chat);
        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");
        var result = await Http.PostAsync(uri, content);
        var receivedChat = result.Content.ReadFromJsonAsync<ReceivedChat>().Result;
        
        var response = await Http.GetAsync($"http://localhost:4000/api/chats/{receivedChat.chat_id}?token={Token}");
        if (response.StatusCode == HttpStatusCode.InternalServerError)
        {
            uri = $"http://localhost:4000/api/chats?token={Token}";
            var chatDto = new ChatDto {ChatID = new Guid(receivedChat.chat_id), ClientID = new Guid(ClientId), TutorID = new Guid(TutorId)};
            json = JsonConvert.SerializeObject(chatDto);
            content = new StringContent(json, Encoding.UTF8, "application/json");
            await Http.PostAsync(uri, content);
        }

        NavigationManager.NavigateTo($"http://localhost:9000/chat/{receivedChat.chat_id}/{Token}");
    }
    
    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("https://tutor-project-account.herokuapp.com/Login");
    }
}