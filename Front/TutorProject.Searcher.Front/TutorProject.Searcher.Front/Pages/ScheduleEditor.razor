@page "/Schedule-editor/{token}"
@using TutorProject.Searcher.Front.Models
@using Newtonsoft.Json
@using System.Net
@inject NavigationManager NavigationManager
@inject HttpClient Http


<PageTitle>SchedulEditor</PageTitle>

<button class="btn btn-warning" style="float: right" @onclick="() => NavigateToHome()">
    Домой
</button>
<br>
<br>
<br>

    <h2><strong>Расписание</strong></h2>
<br>
<br>

    <button class="btn btn-success btn-lg" @onclick="() => SetAllTimeFree()">
        Освободить все расписание
    </button>
    <button class="btn btn-danger btn-lg" @onclick="() => SetAllTimeTaken()">
        Закрыть все расписание
    </button>
    <p></p>
    <style>
    tr.tight { line-height: 0.001rem;}
    td.tight { line-height: 0.01rem; }
</style>

<div class="alert w-75">
    <table class="table table-sm">
        <thead>
        <tr>
            <th class="text-center">
                <h4>ПН</h4>
            </th>
            <th class="text-center">
                <h4>ВТ</h4>
            </th>
            <th class="text-center">
                <h4>СР</h4>
            </th>
            <th class="text-center">
                <h4>ЧТ</h4>
            </th>
            <th class="text-center">
                <h4>ПТ</h4>
            </th>
            <th class="text-center">
                <h4>СБ</h4>
            </th>
            <th class="text-center">
                <h4>ВС</h4>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var lesson in LessonTime)
        {
            var j = LessonTime.IndexOf(lesson);
            <tr class="tight">
                @foreach (var day in TutorSchedule.FreeTimeSchedule)
                {
                    var i = TutorSchedule.FreeTimeSchedule.IndexOf(day);
                    @switch (TutorSchedule?.FreeTimeSchedule[i].DaySchedule[j].ToString())
                    {
                        case "True":
                            <td>
                                <blockquote class="blockquote text-center">
                                    <button class="btn btn-success btn-lg" @onclick="() => SetTimeTaken(i, j)">
                                        @lesson
                                    </button>
                                </blockquote>
                            </td>
                            break;
                        case "False":
                            <td>
                                <blockquote class="blockquote text-center" @onclick="() => SetTimeFree(i, j)">
                                    <button class="btn btn-secondary btn-lg">
                                        @lesson
                                    </button>
                                </blockquote>
                            </td>
                            break;
                    }
                }

            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public string Token { get; set; }
    
    private AuthorizedUser User { get; set; }
    private string UserId { get; set; }
    
    private ScheduleResult? TutorSchedule { get; set; }
    private List<string> LessonTime { get; set; } = new List<string>();
    private string ScheduleStart { get; set; } = "http://localhost:6001/schedule/";

    protected override async Task OnInitializedAsync()
    {
        var authoResponse = await Http.GetAsync($"https://tutor-project-test.herokuapp.com/api/authorization?token={Token}");
        if (authoResponse.StatusCode == HttpStatusCode.BadRequest)
        {
            NavigationManager.NavigateTo("https://tutor-project-account.herokuapp.com/Login");
        }        
        User = authoResponse.Content.ReadFromJsonAsync<AuthorizedUser>().Result;

        if (User.UserId == null)
        {
            NavigationManager.NavigateTo("https://tutor-project-account.herokuapp.com/Login");
        } 
        UserId = User.UserId.ToString();
        
        var response = await Http.GetAsync(ScheduleStart + $"{UserId}/getSchedule");
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;

        for (int i = 0; i < 12; i++)
        {
            LessonTime.Add((i + 9).ToString() + ":00");
        }
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("https://tutor-project-account.herokuapp.com/Login");
    }

    private async Task SetAllTimeTaken()
    {
        var uri = ScheduleStart + $"{UserId}/setAllTimeTaken";
        var response = await Http.DeleteAsync(uri);
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;
    }
    
    private async Task SetAllTimeFree()
    {
        var uri = ScheduleStart + $"{UserId}/setAllTimeFree";
        var response = await Http.DeleteAsync(uri);
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;
    }
    
    private async Task SetTimeTaken(int day, int lessonTime)
    {
        var uri = ScheduleStart + $"{UserId}/setTimeTaken?DayOfWeek={day}&LessonNumber={lessonTime}";
        var lesson = new Lesson()
        {
            // UserId = TutorSchedule.Tutor.Id,
            DayOfWeek = day,
            LessonTime = lessonTime
        };
        string json = JsonConvert.SerializeObject(lesson);
        HttpContent content = new StringContent(json);
        var response = await Http.PutAsync(uri, content);
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;
    }

    private async Task SetTimeFree(int day, int lessonTime)
    {
        var uri = ScheduleStart + $"{UserId}/addFreeTime?DayOfWeek={day}&LessonNumber={lessonTime}";
        var lesson = new Lesson()
        {
            TutorId = new Guid(UserId),
            DayOfWeek = day,
            LessonTime = lessonTime
        };
        string json = JsonConvert.SerializeObject(lesson);
        HttpContent content = new StringContent(json);
        var response = await Http.PutAsync(uri, content);
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;
    }
    
}