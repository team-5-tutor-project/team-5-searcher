@page "/Blacklist/{token}"
@using Microsoft.AspNetCore.Components
@using TutorProject.Searcher.Front.Models
@using System.Net
@inject NavigationManager _navigationManager
@inject HttpClient _http

<PageTitle>Blacklist</PageTitle>
<button class="btn btn-warning" style="float: right" @onclick="() => NavigateToHome()">
    Домой
</button>
<br>
<br>
<h1>Черный список</h1>

@if (_tutorsToShowList == null || _tutorsToShowList.Count == 0)
{
     <p><em>@_message</em></p>
}
else
{
    <div class = "alert w-auto">
        <table class="table table-sm table-hover">
            <thead class="table-bordered border-top-0">
            <tr>
                <th scope="col" class="text-center">Имя</th>
                <th scope="col" class="text-center">Цена за час</th>
                <th scope="col" class="text-center">Классы обучения</th>
                <th scope="col" class="text-center">Предметы</th>
                <th scope="col" class="text-center">Подробная информация</th>

            </tr>
            </thead>
            <tbody>
            @{
                System.Diagnostics.Debug.Assert(_tutorsToShowList != null, nameof(_tutorsToShowList) + " != null");
            }
            @foreach (var tut in _tutorsToShowList)
            {
                <tr>
                    <td>
                        <div class="text-center">
                            @tut.Tutor.Name
                        </div>
                    </td>
                    <td>
                        <div class="text-center">
                            @if (tut.Tutor.PricePerHour != 0)
                            {
                                <p>@tut.Tutor.PricePerHour</p>
                            }
                            else
                            {
                                <p>Не указана</p>
                            }
                        </div>
                    </td>
                    <td>
                        <div class="text-center">
                            @if (tut.Tutor.PupilMinClass != 0 && tut.Tutor.PupilMaxClass != 0)
                            {
                                @if (tut.Tutor.PupilMinClass != 0 && tut.Tutor.PupilMaxClass == tut.Tutor.PupilMinClass)
                                {
                                    <p>@tut.Tutor.PupilMinClass</p>
                                }
                                else
                                {
                                    <p>@tut.Tutor.PupilMinClass - @tut.Tutor.PupilMaxClass</p>
                                }
                            }
                            else
                            {
                                if (tut.Tutor.PupilMinClass == 0 && tut.Tutor.PupilMaxClass != 0)
                                {
                                    <p>Не старше @tut.Tutor.PupilMaxClass</p>
                                }
                                else
                                {
                                    if (tut.Tutor.PupilMinClass != 0 && tut.Tutor.PupilMaxClass == 0)
                                    {
                                        <p>Не младше @tut.Tutor.PupilMinClass</p>
                                    }
                                    else
                                    {
                                        <p>Не указаны</p>
                                    }
                                }
                            }
                        </div>
                    </td>
                    <td><div class="text-center">
                            @tut.Subjects
                        </div>
                        </td>
                    <td><div class="text-center"><a href="/Additional-information/@tut.Tutor.Id/@token">Посмотреть</a></div></td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    public string token { get; set; }
    
    private AuthorizedUser? _client;
    private List<TutorResult>? _tutorsList;
    private List<TutorToShow>? _tutorsToShowList;
    private string _message = "Загрузка...";
    private string Start { get; set; } = "http://localhost:6001/";

    
    protected override async Task OnInitializedAsync()
    {
        var responseMessage = await _http.GetAsync($"http://localhost:4000/api/authorization?token={token}");
        if (responseMessage.StatusCode == HttpStatusCode.BadRequest)
        {
            _navigationManager.NavigateTo("http://localhost:5000/login");
        }
        _client = responseMessage.Content.ReadFromJsonAsync<AuthorizedUser>().Result;
        if (_client.UserId == null)
        {
            _navigationManager.NavigateTo("http://localhost:5000/login");
        }        
        
        _tutorsList = new List<TutorResult>();
        _tutorsToShowList = new List<TutorToShow>();
        
        var response = await _http.GetAsync(Start + $"blacklist/{_client.UserId}/getTutorsFromBlacklist");
        if (response.IsSuccessStatusCode)
        {
            _tutorsList = response.Content.ReadFromJsonAsync<List<TutorResult>>().Result;
        }

        if (_tutorsList != null && _tutorsList.Count != 0)
        {
            foreach (var tutor in _tutorsList)
            {
                tutor.Description ??= "-";
                var resp = await _http.GetAsync(Start + $"searcher/{tutor.Id}/getAllSubjects");
                var subjects = resp.Content.ReadFromJsonAsync<List<string>>().Result;
                _tutorsToShowList.Add(new TutorToShow(tutor, subjects));
            }
        }
        _message = "У вас пока нет репетиторов в Черном списке";
    }
    
    private void NavigateToHome()
    {
        _navigationManager.NavigateTo("http://localhost:5000/login");
    }
}