@page "/Additional-information/{tutorId}/{token}"
@using TutorProject.Searcher.Front.Models
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Schedule</PageTitle>

<h2>Расписание</h2>

<h3>@TutorSchedule?.Tutor.Name</h3>
<h5 class="mb-2 text-muted">@TutorSchedule?.Tutor.PricePerHour ₽</h5>
<p>@TutorSchedule?.Tutor.Description</p>
@if (ClientId == TutorId)
{
    <a href="http://localhost:7000/search/schedule-editor/@Token" class="card-link" >Редактировать расписание</a>
}
else
{
    <a href="#" class="card-link" >Начать чат</a>
}

<table class="table">
    <thead>
    <tr>
        <th class="text-center">Понедельник</th>
        <th class="text-center">Вторник</th>
        <th class="text-center">Среда</th>
        <th class="text-center">Четверг</th>
        <th class="text-center">Пятница</th>
        <th class="text-center">Суббота</th>
        <th class="text-center">Воскресенье</th>
    </tr>
    </thead>
    <tbody>
    
    @for (var i = 0; i < 12; i++)
    {
        <tr>
            @for (var j = 0; j < 7; j++)
            {
                @switch (TutorSchedule?.FreeTimeSchedule[j].DaySchedule[i].ToString())
                {
                    case "True":
                        <td>
                            <blockquote class="blockquote text-center">
                                <button class="btn btn-success btn-sm">
                                    @LessonTime[i]
                                </button>
                            </blockquote>
                        </td>
                        break;
                    case "False":
                        <td>
                            <blockquote class="blockquote text-center">
                                <button class="btn btn-secondary btn-sm" disabled>
                                    @LessonTime[i]
                                </button>
                            </blockquote>
                        </td>
                        break;
                    
                }
            }
        </tr>
    }
    </tbody>
</table>

@code {

    [Parameter]
    public string TutorId { get; set; }
    
    [Parameter]
    public string Token { get; set; }

    private AuthorizedUser User { get; set; }
    private string ClientId { get; set; }
    private ScheduleResult? TutorSchedule { get; set; }
    private List<string> LessonTime { get; set; } = new List<string>();
    private string Start { get; set; } = "http://localhost:6001/";
    private string ScheduleStart { get; set; } = "http://localhost:6001/schedule/";


    protected override async Task OnInitializedAsync()
    {
        var authoResponse = await Http.GetAsync($"http://localhost:4000/api/authorization?token={Token}");
        User = authoResponse.Content.ReadFromJsonAsync<AuthorizedUser>().Result;
        if (User.UserId == null)
        {
            NavigationManager.NavigateTo("http://localhost:7020/login");
        }
        ClientId = User.UserId.ToString();
        
        var response = await Http.GetAsync(ScheduleStart + $"{TutorId}/getSchedule");
        TutorSchedule = response.Content.ReadFromJsonAsync<ScheduleResult>().Result;

        for (int i = 0; i < 12; i++)
        {
            LessonTime.Add((i + 9).ToString() + ":00");
        }
    }
    
    private async Task DeleteFromFavorites(Guid tutorId)
    {
        await Http.DeleteAsync(Start + $"favorites/{ClientId}/deleteTutorFromFavorites?tutorId={tutorId}");
    }
    
    private async Task DeleteFromBlacklist(Guid tutorId)
    {
        await Http.DeleteAsync(Start + $"blacklist/{ClientId}/deleteTutorFromBlacklist?tutorId={tutorId}");
    }
    
    private async Task AddToBlackList(string tutorId)
    {
        var uri = Start + $"blacklist/{ClientId}/addTutorToBlacklist?tutorId={tutorId}";
        var clientToTutor = new ClientToTutor { Id = new Guid(), Client  = new Guid(ClientId), Tutor = new Guid(tutorId)};
        string json = JsonConvert.SerializeObject(clientToTutor);
        HttpContent content = new StringContent(json);
        await Http.PostAsync(uri, content);
    }
    
    private async Task AddToFavourites(string tutorId)
    {
        var uri = Start + $"favorites/{ClientId}/addTutorToFavorites?tutorId={tutorId}";
        var clientToTutor = new ClientToTutor { Id = new Guid(), Client  = new Guid(ClientId), Tutor = new Guid(tutorId)};
        string json = JsonConvert.SerializeObject(clientToTutor);
        HttpContent content = new StringContent(json);
        await Http.PostAsync(uri, content);
    }
    
    private void StartChat(string? tutorId)
    {
        
    }
}